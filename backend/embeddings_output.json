{
    "dataset_name": {
        "embedding": [
            -0.045638784766197205,
            0.017838167026638985,
            0.014877019450068474,
            -0.026881935074925423,
            0.0029527219012379646,
            -0.03142131119966507,
            0.03750613331794739,
            0.08008575439453125,
            -0.1107356995344162,
            0.015396279282867908,
            0.030398458242416382,
            0.037058353424072266,
            -0.02558685652911663,
            0.04385503754019737,
            0.015344535931944847,
            -0.013869905844330788,
            -0.057865142822265625,
            -0.0068232337944209576,
            -0.0038667148910462856,
            -0.0031253774650394917,
            0.03613485395908356,
            0.0014566680183634162,
            -0.0836545079946518,
            0.07478264719247818,
            0.014346268959343433,
            -0.0603853203356266,
            0.10142859816551208,
            0.07726962864398956,
            -0.01597161777317524,
            -0.05689353495836258,
            0.023843679577112198,
            0.015809135511517525,
            0.03301090747117996,
            -0.019102897495031357,
            0.07046956568956375,
            0.024219665676355362,
            0.02216258831322193,
            -0.032716304063797,
            -0.003860127879306674,
            -0.04080203175544739,
            -0.03773558512330055,
            0.020624980330467224,
            0.022538360208272934,
            0.06648332625627518,
            0.02008679509162903,
            -0.06379483640193939,
            0.02578785829246044,
            0.024725819006562233,
            0.0633406713604927,
            -0.0974586084485054,
            -0.037383709102869034,
            0.04827750474214554,
            0.012154882773756981,
            -0.011890888214111328,
            0.02164708636701107,
            -0.08774334192276001,
            -0.04735581576824188,
            0.05727716535329819,
            0.038524601608514786,
            -0.019293900579214096,
            0.10489406436681747,
            -0.07352761179208755,
            -0.00735978689044714,
            -0.027307048439979553,
            0.006966718006879091,
            0.013029495254158974,
            0.06891752779483795,
            0.011630856432020664,
            -0.036281995475292206,
            0.05118473246693611,
            -0.0286338459700346,
            0.01125170849263668,
            -0.04704604670405388,
            0.07232985645532608,
            -0.003851036773994565,
            0.05683252960443497,
            0.028672438114881516,
            0.0034354240633547306,
            -0.00620320113375783,
            -0.09734643995761871,
            -0.08340500295162201,
            -0.09916853159666061,
            0.046993840485811234,
            0.04055735096335411,
            0.06686564534902573,
            0.005550707690417767,
            -0.04969260096549988,
            0.02501773275434971,
            0.04654156044125557,
            0.03071003593504429,
            -0.005710852798074484,
            0.030887262895703316,
            0.028548534959554672,
            0.025764789432287216,
            0.08089593052864075,
            0.007892005145549774,
            0.06166017800569534,
            -0.10030949860811234,
            -0.022362319752573967,
            0.07470657676458359,
            -0.0006078217411413789,
            0.009786677546799183,
            0.008452645502984524,
            0.03967047482728958,
            -0.04404640942811966,
            -0.014757341705262661,
            0.052380211651325226,
            0.011160462163388729,
            0.06291720271110535,
            -0.018032530322670937,
            -0.03785359859466553,
            0.0276112612336874,
            -0.08346457034349442,
            -0.05637599527835846,
            0.03221762552857399,
            -0.14410674571990967,
            -0.08010592311620712,
            0.022483443841338158,
            -0.05426594987511635,
            -0.03934008255600929,
            -0.02884691022336483,
            -0.02097672037780285,
            -0.05225305259227753,
            -0.045182935893535614,
            -0.020080748945474625,
            0.021203141659498215,
            0.01979108713567257,
            -8.542941010444476e-34,
            0.03900809586048126,
            -0.03799451142549515,
            -0.05761219188570976,
            0.05806660279631615,
            0.011087611317634583,
            -0.0374126210808754,
            -0.008346311748027802,
            -0.03108898177742958,
            0.006605760660022497,
            0.03557271137833595,
            -0.02705712430179119,
            -0.03991033509373665,
            -0.001829140936024487,
            0.015789691358804703,
            0.07624731957912445,
            -0.07323954999446869,
            -0.015424071811139584,
            0.09244689345359802,
            0.040239159017801285,
            0.019960680976510048,
            0.06584814190864563,
            0.03565341979265213,
            0.029757648706436157,
            -0.11275839805603027,
            0.06085904687643051,
            0.0419427715241909,
            -0.015581599436700344,
            0.0719543918967247,
            0.1226402148604393,
            0.02237137034535408,
            0.0239433404058218,
            -0.048580169677734375,
            0.013208881951868534,
            -0.051670584827661514,
            0.06553048640489578,
            -0.009575788863003254,
            -0.06381774693727493,
            -0.025046175345778465,
            -0.06126132234930992,
            0.0790594220161438,
            -0.008978631347417831,
            -0.013680524192750454,
            -0.047781068831682205,
            0.02857242338359356,
            0.03439961373806,
            -0.055778007954359055,
            -0.08173511922359467,
            0.06915303319692612,
            -0.004752899054437876,
            0.04762646183371544,
            -0.1356855183839798,
            0.04995949566364288,
            -0.011070274747908115,
            -0.05445990711450577,
            0.05294869467616081,
            0.05052934214472771,
            0.02718094363808632,
            -0.012782794423401356,
            0.017105121165513992,
            -0.007817359641194344,
            0.07150500267744064,
            0.06684138625860214,
            0.005516551434993744,
            -0.11418040096759796,
            0.012282184325158596,
            0.037741199135780334,
            0.02471270225942135,
            0.0013395895948633552,
            -0.09359845519065857,
            0.043202172964811325,
            -0.05372481793165207,
            -0.03567882254719734,
            0.0368867851793766,
            0.029770025983452797,
            -0.022727955132722855,
            -0.06408596783876419,
            -0.015920618548989296,
            -0.021850958466529846,
            -0.09961246699094772,
            -0.11931905895471573,
            -0.057965148240327835,
            -0.08667625486850739,
            -0.013701262883841991,
            0.07175949215888977,
            -0.10313905775547028,
            0.04316595196723938,
            0.025037594139575958,
            0.014498868025839329,
            0.013358822092413902,
            0.09392305463552475,
            -0.07715746760368347,
            0.0003102075424976647,
            0.019081713631749153,
            0.04112861305475235,
            -0.05274434760212898,
            1.0692919259743478e-33,
            -0.10572084039449692,
            0.0062751309014856815,
            0.0645587146282196,
            -0.03761041536927223,
            -0.05502801015973091,
            -0.0519787073135376,
            0.0762205719947815,
            0.07927561551332474,
            0.03379341587424278,
            0.06011757627129555,
            0.006768363993614912,
            0.011432004161179066,
            0.00480353320017457,
            -0.05887654051184654,
            -0.10151641815900803,
            -0.031280066817998886,
            -0.02462158538401127,
            -0.09257145971059799,
            0.079262875020504,
            0.031908489763736725,
            0.05564914643764496,
            0.0002695574949029833,
            0.060378942638635635,
            0.0017756510060280561,
            -0.05917404964566231,
            0.09800253808498383,
            0.020339591428637505,
            0.034290723502635956,
            0.002627680543810129,
            -0.0341392382979393,
            0.134925976395607,
            -0.053097814321517944,
            0.009268559515476227,
            0.08578163385391235,
            0.046157266944646835,
            0.007723168935626745,
            0.06822432577610016,
            -0.026074489578604698,
            -0.03447987139225006,
            -0.07329172641038895,
            0.09081683307886124,
            0.04134667292237282,
            0.014347937889397144,
            0.03527425229549408,
            0.011615579947829247,
            -0.05482069402933121,
            0.037280768156051636,
            -0.018137073144316673,
            0.009902207180857658,
            -0.05944276601076126,
            -0.008700226433575153,
            -0.028773020952939987,
            -0.011461454443633556,
            0.0025740154087543488,
            -0.023293599486351013,
            -0.05219187214970589,
            0.05182541534304619,
            0.0928950309753418,
            0.06855466216802597,
            0.016922101378440857,
            -0.0412321500480175,
            -0.00828327052295208,
            0.03467092290520668,
            0.046434491872787476,
            -0.010690057650208473,
            -0.0018179042963311076,
            0.012491362169384956,
            -0.007600689772516489,
            0.016938060522079468,
            0.09624098241329193,
            -0.006474118214100599,
            -0.03602496534585953,
            0.050365179777145386,
            -0.01249015238136053,
            0.033572692424058914,
            0.033685218542814255,
            -0.11515026539564133,
            -0.05123382434248924,
            -0.02770131267607212,
            0.010045538656413555,
            0.08324223756790161,
            -0.012927020899951458,
            -0.022648634389042854,
            0.08305516093969345,
            -0.011984147131443024,
            -0.01975311152637005,
            0.07821206748485565,
            0.07176880538463593,
            0.004169688560068607,
            -0.1038944199681282,
            0.008032291196286678,
            -0.0007312424713745713,
            0.005611203610897064,
            0.11471594125032425,
            -0.014881194569170475,
            -1.1648954689746915e-08,
            -0.024477235972881317,
            -0.008092895150184631,
            0.08993275463581085,
            0.007437624502927065,
            0.04072603955864906,
            -0.10550528019666672,
            0.006055893376469612,
            -0.12318899482488632,
            0.015881013125181198,
            -0.018293503671884537,
            -0.05147384852170944,
            0.05838249623775482,
            -0.06368684023618698,
            -0.05681519955396652,
            0.02941884472966194,
            0.0020946296863257885,
            -0.07094887644052505,
            0.08504284918308258,
            -0.013381106778979301,
            -0.05502559617161751,
            0.017281925305724144,
            0.024494819343090057,
            0.02566668950021267,
            -0.06765251606702805,
            0.04610735923051834,
            0.0019027928356081247,
            -0.0015675819013267756,
            0.07254993170499802,
            0.04247194901108742,
            0.006990865338593721,
            -0.010415659286081791,
            0.05823054164648056,
            0.04071061313152313,
            -0.022105948999524117,
            0.0027911020442843437,
            0.029240112751722336,
            0.07725364714860916,
            0.050468698143959045,
            0.0457330048084259,
            -0.012296121567487717,
            -0.022823864594101906,
            0.047618232667446136,
            -0.04042636603116989,
            -0.018463805317878723,
            0.04952503740787506,
            0.03214418888092041,
            -0.074156254529953,
            0.025130625814199448,
            -0.04657503589987755,
            0.012381390668451786,
            8.202099706977606e-05,
            0.013150595128536224,
            -0.08052029460668564,
            0.04180404543876648,
            -0.10396310687065125,
            -0.011871318332850933,
            -0.06971264630556107,
            -0.06049341335892677,
            -0.08039552718400955,
            0.004183411598205566,
            0.04148517921566963,
            -0.0054099541157484055,
            0.023532681167125702,
            0.019942065700888634
        ],
        "original_data": "Firmware Error Examples"
    },
    "errors": {
        "embedding": [
            0.03268042206764221,
            0.03672099858522415,
            -0.03480447828769684,
            -0.05119062587618828,
            -0.06611998379230499,
            -0.1188981905579567,
            0.04056239500641823,
            0.07054892927408218,
            -0.10176734626293182,
            0.01413470134139061,
            -0.02414524368941784,
            0.015031340532004833,
            0.01511130016297102,
            -0.08111278712749481,
            -0.1080082431435585,
            -0.008887703530490398,
            -0.18985548615455627,
            0.020977241918444633,
            0.011972656473517418,
            -0.046917498111724854,
            -0.0358431339263916,
            0.026645462960004807,
            -0.19196835160255432,
            0.01967603713274002,
            -0.040286045521497726,
            0.08994917571544647,
            -0.004555972758680582,
            0.05258302018046379,
            -0.04457560181617737,
            -0.017797449603676796,
            0.013850594870746136,
            0.0030320261139422655,
            0.06969700008630753,
            0.05593593418598175,
            0.01808026432991028,
            0.04042987525463104,
            -0.05685597285628319,
            -0.022934943437576294,
            -0.03388243913650513,
            0.05851291865110397,
            -0.08556912839412689,
            0.043669480830430984,
            -0.03886274993419647,
            0.013242718763649464,
            0.0018729032017290592,
            -0.013660313561558723,
            -0.06252063810825348,
            0.012542258016765118,
            -0.015664787963032722,
            -0.017949825152754784,
            -0.10930395871400833,
            0.11092744022607803,
            0.050368208438158035,
            -0.053070858120918274,
            0.03528232127428055,
            -0.11917011439800262,
            0.05588258057832718,
            -0.06601695716381073,
            0.0732228010892868,
            -0.003631603205576539,
            0.0338691882789135,
            0.02956726960837841,
            0.007880310527980328,
            -0.024862272664904594,
            0.021832391619682312,
            -0.001412645447999239,
            0.012547317892313004,
            0.04279984161257744,
            -0.010358745232224464,
            -0.015039930120110512,
            -0.08907894790172577,
            0.0819801390171051,
            -0.03090655617415905,
            0.06254800409078598,
            -0.023969758301973343,
            -0.005997464060783386,
            -0.015594810247421265,
            0.005708030890673399,
            0.03696741908788681,
            -0.06113050505518913,
            -0.015364643186330795,
            0.05307256802916527,
            0.006748363375663757,
            0.0003020025906153023,
            -0.04086973890662193,
            0.049715470522642136,
            -0.039673663675785065,
            0.06810448318719864,
            0.07474575936794281,
            -0.019434180110692978,
            0.0022442189510911703,
            -0.003744903253391385,
            -0.07301860302686691,
            0.04357467219233513,
            0.0850488618016243,
            0.04967962205410004,
            0.03254416212439537,
            -0.06216247007250786,
            0.01365380734205246,
            0.0769922137260437,
            -0.02571527659893036,
            -0.02023823745548725,
            0.020681632682681084,
            0.02002144418656826,
            0.0012799062533304095,
            -0.02096879482269287,
            0.07101593166589737,
            0.021744856610894203,
            -0.003805566346272826,
            -0.04616712033748627,
            -0.005298505071550608,
            -0.00934631284326315,
            -0.029462989419698715,
            -0.0011502343695610762,
            0.0830211415886879,
            -0.06394469738006592,
            -0.030260099098086357,
            -0.006160330027341843,
            -0.023814057931303978,
            0.007426359225064516,
            -0.02414689213037491,
            -0.021932512521743774,
            -0.03595313802361488,
            0.06888049095869064,
            0.0013015021104365587,
            -0.05126398429274559,
            -0.08082201331853867,
            3.1912926750398104e-33,
            -0.06854786723852158,
            -0.0809846892952919,
            0.0009042383171617985,
            0.0047692409716546535,
            -0.003374404739588499,
            -0.03179139271378517,
            0.0042401566170156,
            -0.017612973228096962,
            -0.015048056840896606,
            0.030192475765943527,
            0.004443115554749966,
            -0.09283430129289627,
            0.07889168709516525,
            0.06909492611885071,
            0.05054957792162895,
            -0.01861364208161831,
            0.08733558654785156,
            0.01588122546672821,
            -0.04755626246333122,
            -0.09960539638996124,
            0.04748707264661789,
            -0.04663786664605141,
            -0.0010695861419662833,
            -0.013629533350467682,
            -0.023828960955142975,
            0.03272701054811478,
            -0.02720354124903679,
            -0.04837999865412712,
            0.0695219337940216,
            0.005672725383192301,
            -0.008824687451124191,
            0.01357821375131607,
            0.047887880355119705,
            -0.05225444585084915,
            0.10776157677173615,
            -0.05557120963931084,
            0.05705442652106285,
            0.06419386714696884,
            0.03614811971783638,
            -0.0009476738050580025,
            0.014015300199389458,
            -0.060143694281578064,
            0.08896256983280182,
            0.06982336193323135,
            0.002037121681496501,
            -0.031225167214870453,
            -0.028735075145959854,
            0.04704407602548599,
            -0.036635227501392365,
            0.03565450757741928,
            -0.049783505499362946,
            -0.001502892468124628,
            0.033530037850141525,
            0.025519313290715218,
            -0.00529506104066968,
            0.0003584128280635923,
            -0.09053197503089905,
            0.018638217821717262,
            -0.001537419157102704,
            0.08414196223020554,
            -0.03600136563181877,
            0.06274645775556564,
            0.036331720650196075,
            0.026952875778079033,
            0.00096175103681162,
            0.023706501349806786,
            -0.02998374216258526,
            -0.007440553978085518,
            0.0996696799993515,
            0.04735461622476578,
            -0.08301403373479843,
            -0.004711981397122145,
            0.0439322330057621,
            0.03655072674155235,
            -0.08182093501091003,
            -0.003192791948094964,
            -0.016516270115971565,
            0.07540188729763031,
            -0.0534745492041111,
            -0.06789670139551163,
            0.014851905405521393,
            -0.014838685281574726,
            0.039756614714860916,
            -0.03976920619606972,
            -0.011350016109645367,
            -0.06160815432667732,
            0.03528562933206558,
            -0.043710269033908844,
            -0.010916927829384804,
            -0.01720442995429039,
            -0.027022676542401314,
            -0.018635567277669907,
            0.018544072285294533,
            -0.06934230774641037,
            -0.035409703850746155,
            -5.1681343817871134e-33,
            0.06068125739693642,
            0.09058383107185364,
            0.014413164928555489,
            -0.013141474686563015,
            -0.07508254796266556,
            -0.017861120402812958,
            0.04067423567175865,
            -0.06472935527563095,
            -0.0019324275199323893,
            0.06781859695911407,
            -0.016192501410841942,
            0.032618261873722076,
            0.013319388031959534,
            0.05203314870595932,
            0.0846305713057518,
            -0.008886080235242844,
            -0.03976810351014137,
            0.012513036839663982,
            0.004448989871889353,
            0.07024429738521576,
            -0.006461590528488159,
            -0.04436225816607475,
            0.020888276398181915,
            -0.02347852848470211,
            -0.046754948794841766,
            0.05322244390845299,
            0.01108811516314745,
            0.006419953890144825,
            -0.012567042373120785,
            -0.03099117986857891,
            -0.009448731318116188,
            0.020009765401482582,
            0.017674226313829422,
            0.036693934351205826,
            0.1116839200258255,
            -0.06599956005811691,
            0.03384166210889816,
            0.0037438473664224148,
            -0.04102512449026108,
            -0.07268118113279343,
            0.08241304755210876,
            0.06049194931983948,
            0.07313179224729538,
            -0.04712410271167755,
            0.03346431627869606,
            0.048577118664979935,
            0.02087509259581566,
            0.09734093397855759,
            -0.112652987241745,
            -0.07117732614278793,
            -0.05443945154547691,
            -0.01723334938287735,
            -0.044412147253751755,
            0.04048848897218704,
            0.004319197032600641,
            0.049269504845142365,
            0.02420966327190399,
            0.059550631791353226,
            -0.02092764340341091,
            0.01839488372206688,
            -0.09772394597530365,
            -0.09553879499435425,
            0.027255138382315636,
            -0.007687174715101719,
            0.07118020206689835,
            -0.08185134083032608,
            -0.03788542002439499,
            -0.07085050642490387,
            -0.04657698795199394,
            0.04245404899120331,
            0.0017921705730259418,
            0.04762207716703415,
            -0.0038152935449033976,
            -0.05356869101524353,
            -0.020720886066555977,
            -0.002216677414253354,
            -0.08724883198738098,
            -0.01173911802470684,
            -0.017277183011174202,
            0.11506713181734085,
            0.01642460562288761,
            0.026753127574920654,
            0.019282670691609383,
            0.09862420707941055,
            -0.02878701314330101,
            0.02569359727203846,
            0.05658083036541939,
            -0.05652426928281784,
            -0.025188596919178963,
            -0.03639795258641243,
            -0.012144042178988457,
            0.033539779484272,
            0.07225839793682098,
            -0.023413386195898056,
            0.01936355233192444,
            -4.354786042881642e-08,
            0.0807633176445961,
            -0.09465651959180832,
            -0.023325495421886444,
            0.009680205956101418,
            0.05792422965168953,
            -0.05374673381447792,
            -0.09926705807447433,
            -0.06097389757633209,
            -0.003130448516458273,
            -0.00970710813999176,
            0.042106661945581436,
            -0.03924911469221115,
            -0.006302103865891695,
            -0.02844647318124771,
            -0.03137558326125145,
            -0.02145327441394329,
            -0.02035987749695778,
            -0.10626328736543655,
            -0.00975736603140831,
            -0.014314714819192886,
            -0.007390474434942007,
            -0.01693396084010601,
            0.007672206498682499,
            0.006853696424514055,
            0.07708998769521713,
            -0.0775536522269249,
            0.007719552610069513,
            -0.004307264927774668,
            -0.003451999044045806,
            -0.05057867243885994,
            0.07766149193048477,
            0.0317901112139225,
            0.09765736013650894,
            -0.03600137308239937,
            0.10315947234630585,
            -0.01435923296958208,
            0.03014165535569191,
            0.053634148091077805,
            -0.00923701748251915,
            -0.04239765927195549,
            -0.030154023319482803,
            0.06816577911376953,
            -0.010260019451379776,
            -0.030449535697698593,
            0.042863138020038605,
            -0.03164662793278694,
            0.003890359541401267,
            0.062451694160699844,
            0.08719184994697571,
            -0.03873659670352936,
            -0.04644005745649338,
            0.09572757035493851,
            0.015746532008051872,
            0.008543449454009533,
            0.016013167798519135,
            -0.07249519973993301,
            -0.09957180172204971,
            -0.005882165860384703,
            0.0328514501452446,
            0.09740694612264633,
            -0.02291918732225895,
            0.08195631206035614,
            -0.07786733657121658,
            -0.056562285870313644
        ],
        "original_data": [
            {
                "error_type": "Segmentation Fault",
                "samples": [
                    {
                        "wrong_code": "\n#include <stdint.h>\n#include <stdio.h>\n\nvoid read_array(int *arr, int size) {\n    for (int i = 0; i <= size; i++) {  // Error: off-by-one error\n        printf(\"%d\\n\", arr[i]);       // Accessing out of bounds\n    }\n}\n\nint main() {\n    int data[5] = {1, 2, 3, 4, 5};\n    read_array(data, 5);  // size is 5, valid indices are 0-4\n    return 0;\n}\n",
                        "right_code": "\n#include <stdint.h>\n#include <stdio.h>\n\nvoid read_array(int *arr, int size) {\n    for (int i = 0; i < size; i++) {  // Fixed: changed <= to <\n        printf(\"%d\\n\", arr[i]);       // Now accesses valid indices\n    }\n}\n\nint main() {\n    int data[5] = {1, 2, 3, 4, 5};\n    read_array(data, 5);  // size is 5, valid indices are 0-4\n    return 0;\n}\n",
                        "common_causes": "Off-by-one error in loop condition leading to out-of-bounds access."
                    },
                    {
                        "wrong_code": "\n#include <stdint.h>\n#include <stdio.h>\n\nvoid process_data(int *data) {\n    *data = 100;  // Error: Dereferencing a null pointer\n}\n\nint main() {\n    int *ptr = NULL;  // Null pointer initialization\n    process_data(ptr); // Passing null pointer\n    return 0;\n}\n",
                        "right_code": "\n#include <stdint.h>\n#include <stdio.h>\n\nvoid process_data(int *data) {\n    if (data != NULL) {  // Added check for null pointer\n        *data = 100;\n    }\n}\n\nint main() {\n    int value;         // Proper initialization\n    int *ptr = &value; // Now pointing to a valid memory address\n    process_data(ptr); // Passing valid pointer\n    return 0;\n}\n",
                        "common_causes": "Dereferencing a null pointer without proper checks."
                    },
                    {
                        "wrong_code": "\n#include <stdint.h>\n#include <stdio.h>\n\nvoid faulty_function() {\n    char *str = \"Hello, World!\"; // Points to string literal\n    str[0] = 'h';  // Error: Modifying read-only memory\n}\n\nint main() {\n    faulty_function(); // Calls the function that causes segmentation fault\n    return 0;\n}\n",
                        "right_code": "\n#include <stdint.h>\n#include <stdio.h>\n\nvoid correct_function() {\n    char str[] = \"Hello, World!\"; // Allocate array on stack\n    str[0] = 'h';  // Now it's safe to modify\n}\n\nint main() {\n    correct_function(); // Calls the function that executes safely\n    return 0;\n}\n",
                        "common_causes": "Attempting to modify a string literal, which is stored in read-only memory."
                    }
                ]
            },
            {
                "error_type": "Stack Overflow",
                "samples": [
                    {
                        "wrong_code": "\n#include <stdint.h>\n#include <stdio.h>\n\nvoid recursive_function(int count) {\n    printf(\"%d\\n\", count);\n    recursive_function(count + 1);  // Error: infinite recursion\n}\n\nint main() {\n    recursive_function(1);  // Starting recursion\n    return 0;\n}\n",
                        "right_code": "\n#include <stdint.h>\n#include <stdio.h>\n\nvoid recursive_function(int count) {\n    if (count > 10) return;  // Base case to terminate recursion\n    printf(\"%d\\n\", count);\n    recursive_function(count + 1);  // Controlled recursion\n}\n\nint main() {\n    recursive_function(1);  // Starting recursion\n    return 0;\n}\n",
                        "common_causes": "Missing base case in recursion leading to infinite recursion."
                    },
                    {
                        "wrong_code": "\n#include <stdint.h>\n#include <stdio.h>\n\nvoid large_stack_function() {\n    int large_array[100000];  // Error: large stack allocation\n    // Do something with large_array\n}\n\nint main() {\n    large_stack_function(); // Calls the function that may cause stack overflow\n    return 0;\n}\n",
                        "right_code": "\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>  // For malloc and free\n\nvoid large_heap_function() {\n    int *large_array = (int *)malloc(100000 * sizeof(int)); // Use heap allocation\n    if (large_array == NULL) {\n        // Handle memory allocation failure\n    }\n    // Do something with large_array\n    free(large_array);  // Don't forget to free the memory\n}\n\nint main() {\n    large_heap_function(); // Calls the function that executes safely\n    return 0;\n}\n",
                        "common_causes": "Large local variable allocations exceeding the stack size."
                    },
                    {
                        "wrong_code": "\n#include <stdint.h>\n#include <stdio.h>\n\nvoid call_next() {\n    call_next(); // Error: function calling itself indefinitely\n}\n\nint main() {\n    call_next(); // Triggers stack overflow due to no termination\n    return 0;\n}\n",
                        "right_code": "\n#include <stdint.h>\n#include <stdio.h>\n\nvoid call_next(int count) {\n    if (count > 10) return; // Base case to prevent overflow\n    call_next(count + 1); // Controlled recursion\n}\n\nint main() {\n    call_next(1); // Starts the controlled recursion\n    return 0;\n}\n",
                        "common_causes": "Infinite recursion without a base case, leading to stack overflow."
                    }
                ]
            }
        ]
    },
    "text_file_embedding": {
        "embedding": [
            -0.111409030854702,
            0.010886612348258495,
            -0.012524422258138657,
            -0.006430051289498806,
            0.021739020943641663,
            -0.051805924624204636,
            0.024317367002367973,
            0.08903112262487411,
            -0.05488583445549011,
            -0.05707710608839989,
            -0.015870768576860428,
            0.006216971203684807,
            -0.032630711793899536,
            -0.07091298699378967,
            0.014359514228999615,
            0.02006610296666622,
            0.1305229216814041,
            -0.013722439296543598,
            -0.009674247354269028,
            -0.03493889421224594,
            -0.01709410548210144,
            -0.08337970077991486,
            -0.019472729414701462,
            -0.025837242603302002,
            -0.027311790734529495,
            0.10836052149534225,
            0.03389725461602211,
            -0.023658256977796555,
            0.04196685925126076,
            -0.029624871909618378,
            -0.018566664308309555,
            0.032812658697366714,
            0.013419034890830517,
            -0.021353552117943764,
            0.023866849020123482,
            0.0312594398856163,
            0.07945557683706284,
            -0.04607165977358818,
            -0.08294396102428436,
            -0.1077570840716362,
            -0.04929286241531372,
            -0.047117430716753006,
            -0.046515755355358124,
            0.06840372830629349,
            0.03822612017393112,
            -0.07429977506399155,
            0.11381737887859344,
            -0.0774836540222168,
            -0.042044058442115784,
            -0.04894992336630821,
            -0.018709933385252953,
            -0.03020572103559971,
            0.04352730140089989,
            -0.057783469557762146,
            0.055638622492551804,
            0.014779351651668549,
            0.024795491248369217,
            -0.018375907093286514,
            -0.04179452732205391,
            -0.0586637482047081,
            0.012546724639832973,
            -0.04358302056789398,
            0.0047516305930912495,
            0.036309558898210526,
            0.048098206520080566,
            0.03267500549554825,
            0.025862962007522583,
            0.008680271916091442,
            0.026200806722044945,
            -0.05218901485204697,
            -0.0371905155479908,
            -0.03122536651790142,
            -0.03165857121348381,
            0.05819709226489067,
            0.05683984234929085,
            -0.08796893805265427,
            0.05128609389066696,
            -0.03922721743583679,
            0.03857801482081413,
            -0.049481868743896484,
            0.026788877323269844,
            0.06275142729282379,
            -0.02237127348780632,
            -0.05237966775894165,
            -0.012509948574006557,
            0.027000445872545242,
            -0.01164210494607687,
            0.10319536179304123,
            0.010038706474006176,
            -0.02759515307843685,
            0.06271383911371231,
            0.01976430043578148,
            0.006305323913693428,
            -0.06765652447938919,
            0.1054072454571724,
            0.05212140083312988,
            0.013145123608410358,
            0.0007780823507346213,
            -0.016755089163780212,
            0.056909117847681046,
            0.018383707851171494,
            -0.05209973081946373,
            -0.02957693673670292,
            -0.0392686203122139,
            -0.021973948925733566,
            0.015469606965780258,
            0.0397055521607399,
            0.009930817410349846,
            -0.10553006827831268,
            -0.012743157334625721,
            0.009879818186163902,
            0.030646642670035362,
            -0.07635295391082764,
            -0.028264367952942848,
            0.03715910017490387,
            -0.012996240518987179,
            -0.03411650285124779,
            -0.017867010086774826,
            0.01700640842318535,
            0.08297204226255417,
            -0.08383771777153015,
            0.027227899059653282,
            -0.03595039248466492,
            0.08095798641443253,
            0.030533816665410995,
            0.04336889833211899,
            0.004008724819868803,
            5.525606989317971e-33,
            -0.039272960275411606,
            0.06830670684576035,
            -0.07868865132331848,
            0.02526066079735756,
            -0.015614369884133339,
            -0.05486178770661354,
            0.12914109230041504,
            0.026941906660795212,
            0.024161111563444138,
            0.0010972946183755994,
            0.0370316281914711,
            0.020072489976882935,
            0.00027210405096411705,
            0.026272114366292953,
            0.08885634690523148,
            -0.07727023214101791,
            -0.013784604147076607,
            -0.030796753242611885,
            0.06710247695446014,
            0.020272662863135338,
            0.017296917736530304,
            -0.03912720829248428,
            0.008454508148133755,
            0.052265673875808716,
            0.004573640879243612,
            0.005584228318184614,
            -0.019393332302570343,
            -0.05551939085125923,
            0.05290582403540611,
            0.019748428836464882,
            -0.0358470194041729,
            -0.00593153340741992,
            -0.03024527244269848,
            -0.027017438784241676,
            0.009907088242471218,
            0.04470386728644371,
            -0.07377857714891434,
            -0.07971011102199554,
            0.0374499186873436,
            -0.04884767904877663,
            -0.11093305796384811,
            0.02809307537972927,
            -0.07347725331783295,
            -0.04954509064555168,
            0.005149471573531628,
            0.03061400167644024,
            0.007719205692410469,
            0.00015905358304735273,
            -0.11888223141431808,
            -0.0016422669868916273,
            -0.012240779586136341,
            0.09281589090824127,
            0.030102280899882317,
            -0.04828723147511482,
            0.02478787861764431,
            -0.014600051566958427,
            0.05116821080446243,
            -0.06439046561717987,
            0.051540806889534,
            0.14946134388446808,
            -0.04084933549165726,
            0.01890275627374649,
            -0.053018294274806976,
            0.08253509551286697,
            -0.03949076682329178,
            0.07906356453895569,
            -0.02955765835940838,
            0.03805236890912056,
            -0.06375151872634888,
            -0.00733162323012948,
            -0.04025899991393089,
            -0.036374531686306,
            -0.03125832602381706,
            0.017273923382163048,
            0.01068189274519682,
            0.07108590006828308,
            0.009222387336194515,
            -0.06306129693984985,
            0.01161125861108303,
            -0.030555889010429382,
            0.030816765502095222,
            0.13449229300022125,
            0.006506233476102352,
            -0.0027204749640077353,
            -0.009763982146978378,
            -0.02893177419900894,
            -0.060669660568237305,
            -0.015236662700772285,
            0.021854177117347717,
            0.06532201915979385,
            -0.03219503164291382,
            -0.03867544233798981,
            0.020046962425112724,
            0.006610686890780926,
            0.014237960800528526,
            -6.781755313628038e-33,
            0.05686388909816742,
            -0.06364156305789948,
            0.03143502399325371,
            0.023110603913664818,
            -0.057345133274793625,
            0.034900959581136703,
            -0.04473383352160454,
            -0.09247031062841415,
            0.061998844146728516,
            0.028407737612724304,
            -0.003948576748371124,
            0.007526247762143612,
            0.01661713421344757,
            0.02392866648733616,
            -0.05476000905036926,
            -0.11069218069314957,
            -0.11962703615427017,
            -0.02220439352095127,
            0.07711037248373032,
            0.021116938441991806,
            -0.0024105384945869446,
            0.08762574940919876,
            -0.014380842447280884,
            -0.04286516085267067,
            -0.07859080284833908,
            0.008550906553864479,
            -0.1385853886604309,
            0.04168054088950157,
            0.0041044182144105434,
            -0.012928477488458157,
            0.05011644959449768,
            -0.03450409695506096,
            0.06127996742725372,
            -0.06496437638998032,
            0.027403566986322403,
            0.0762682557106018,
            -0.005841534119099379,
            0.05347038432955742,
            -0.009664556942880154,
            -0.039543215185403824,
            0.053475890308618546,
            -0.05876370519399643,
            -0.06177936866879463,
            -0.027136599645018578,
            -0.025714121758937836,
            -0.020513905212283134,
            -0.08074554800987244,
            -0.033906690776348114,
            0.026458164677023888,
            -0.0689091607928276,
            0.01366384606808424,
            0.024667849764227867,
            0.06238945573568344,
            -0.04756966605782509,
            0.004119329620152712,
            0.023607676848769188,
            0.049336280673742294,
            -0.05753026902675629,
            0.008705050684511662,
            -0.009987087920308113,
            0.016380125656723976,
            -0.012401650659739971,
            0.0683506429195404,
            -0.024808019399642944,
            0.01965194381773472,
            -0.08787506073713303,
            0.06911113858222961,
            0.025003131479024887,
            -0.06339156627655029,
            -0.0076385196298360825,
            -0.02594009041786194,
            0.002190545666962862,
            -0.036842070519924164,
            0.011768193915486336,
            -0.027980521321296692,
            -0.01307621132582426,
            0.026156814768910408,
            0.01896919310092926,
            -0.03638838231563568,
            0.021326962858438492,
            -0.07022199779748917,
            -0.03110632300376892,
            0.030173268169164658,
            0.04713081941008568,
            0.003126509953290224,
            0.045320842415094376,
            0.029868967831134796,
            -0.10280024260282516,
            0.013612646609544754,
            -0.081699900329113,
            -0.06390462815761566,
            0.015812445431947708,
            -0.04865409433841705,
            0.08155670017004013,
            -0.04556572809815407,
            -6.747578140675614e-08,
            -0.012826516292989254,
            -0.047480594366788864,
            0.043921396136283875,
            -0.05221651494503021,
            -0.02411738783121109,
            0.039702046662569046,
            -0.027329521253705025,
            -0.08910953998565674,
            0.008577664382755756,
            0.05941133201122284,
            0.049819428473711014,
            -0.06418494135141373,
            -0.044914547353982925,
            0.024897323921322823,
            0.05068807676434517,
            0.16527250409126282,
            0.053857043385505676,
            -0.05384229123592377,
            -0.03538302704691887,
            -0.04723651707172394,
            0.04519841447472572,
            0.021137775853276253,
            0.038763921707868576,
            0.013282889500260353,
            0.015397834591567516,
            -0.04698263481259346,
            0.07947994023561478,
            0.030402803793549538,
            0.06851927191019058,
            0.011708555743098259,
            -0.09187145531177521,
            0.012873737141489983,
            0.08476221561431885,
            0.07979700714349747,
            0.0693621039390564,
            -0.0807182788848877,
            0.06981487572193146,
            0.02890440635383129,
            0.04116273671388626,
            0.0661754459142685,
            -0.05957008898258209,
            0.06435338407754898,
            0.009013238362967968,
            -0.003351573133841157,
            -0.0007407747325487435,
            -0.048648327589035034,
            -0.10264943540096283,
            -0.03147684410214424,
            -0.058913592249155045,
            0.053808558732271194,
            0.010895226150751114,
            0.014433722011744976,
            -0.027911953628063202,
            0.1375921368598938,
            0.055810846388339996,
            0.11011950671672821,
            -0.030793331563472748,
            -0.03390174359083176,
            0.021228447556495667,
            0.08403199911117554,
            0.009351834654808044,
            -0.05999106168746948,
            -0.02877812646329403,
            0.011366414837539196
        ],
        "original_data": "\nI would say try to get a feel for everything. Being able to use hardware abstractions layers (HALs) and libraries, open source or vendor provided, IS A SKILL regardless of what anyone says. Using HALs and libraries shows that you can take someone elses code understand it and apply it for whatever your application is. This is very much common practice in industry and more often than not you will be using stuff that already exists instead of rolling your own because time to market matters and figuring out a new chip and writing everything from the ground up is very time consuming. Of course the HAL route will not always work and the provided HAL may not implement some feature that is needed, for example vendor library implements i2c driver that is blocking and causes the cpu to wait while the transfer is in progress but for your application it must do non blocking using an interrupt so you will need to implement your own driver for that, this is very common as most HALs feel like glorified tech demos written by some clueless intern trying to rush it before summer is over and signed off by an even more clueless manager rather than something usable in production *cough cough* NXP. That being said you should understand bare metal as well, being able to write your own device drivers and poking at registers is important. Over my years I met a ton of clowns... errr engineers that have no idea what a register is let alone how to use pointers to read/write to a memory address because all they do is use HALs or use the classic write(), read(), modify() functions someone else made in the company that abstract away the usage of pointers to registers and memory locations. Bare metal also lets you get balls deep in vendor chip manuals and register datasheets which is also a skill. From a pure personal perspective when I work on projects at home I always go extreme bare metal: No HALs, no libraries and stdlib, custom linker script, custom core bootloader/startup (if possible). All in all everything has its place.\n\nYes C is the most popular and aint going away anytime soon, if you know what a pointer is and how to use it I dont doubt your ability. Python + bash/shell/powershell for scripting are your friends as well and in some extremely rare circumstances you may come across and use TCL. There is also the emergence of Rust in the embedded space, but it won't be used in an established company anytime soon, but you can always learn the basics and have it in your arsenal if your interested.\n\nThis depends entirely on who is interviewing you and what they value. Personally from my perspective, projects showcase your abilities, style and approach to problems. Ehh... anyone who calls themselves an expert in C unironically is a clown, as long as you know pointers and basic bit manipulation you good, anything else you can pick up on the job. Bare metal and datasheets kinda go hand in hand, they both rely on each other. So if your project has bare metal it shows you can go through the vendor datasheet imo but ymmv depending whose on the other end. But this really depends on the interviewer, sometimes you land an interviewer that is chill and cares more about your character and whether or not you give off positive energy and are fun to be around with some sprinkled easy technical questions like \"what is a fifo\" or \"what are the two signals on the i2c bus called\" and sometimes you will get the guy who wants to know if you can code some bullshit algorithm that they themselves barely knows or not at all.\n\nThere is no magic formula, just need to pick up a board and get to learning. Focus on stuff that interests you personally and the stars will align.\n\nClosing advice: Just like people come in all shapes and sizes, each engineer has their own skill set, some are incredible programmers, but dont know a lick about hardware, some are a hybrid an have an understanding of both, and some can barely do software, but have an incredible understanding of hardware. Each one of them is valuable at the end of the day in their own regard and covers the others weaknesses.\n\nEmbedded software development has enormous depth and breadth. There are numerous vendors of microcontrollers (MCUs) with different architectures from the venerable Intel 8051 family to Microchip\u00e2\u20ac\u2122s PIC family to numerous vendors with their own ARM and RISC-V based products, and all the associated IDEs, programming and debugging tools. Each MCU has its own peripherals for A to D and D to A, UART, SPI, I2C, CAN, Ethernet, DMA, timers, memory management, GPIO, etc. And then there are various problem domains including communications and networking, power electronics, control, AI, graphics, etc. with all the relevant algorithms, libraries and frameworks that go with them. And then there\u00e2\u20ac\u2122s Bare Metal vs roll-your-own RTOS, versus commercial or freeware RTOSes including ThreadX, FreeRTOS, NutX, etc. and how to debug applications on these.\n\nIn reality it\u00e2\u20ac\u2122s IMPOSSIBLE to master them all. A good embedded engineer knows the fundamental concepts and how to uncover and apply the information found in vendor-supplied documentation, data sheets and application notes. They also know how to clearly document their requirements, designs and their source code, especially when it is leveraging low-level peripheral functions, and can communicate this to other engineers including those responsible for test case automation and execution.\nMastery of embedded software development is a journey not a destination. You will ALWAYS be learning and growing.\n\nThe problem I see is that most students and Computer Science degrees are nowadays focused on areas such as mobile applications, databases and web application design, and less on the fundamentals of computers at the low levels that would be more applicable to an embedded software engineering role. Instead of learning C and rolling their own code, they are using Python and relying on pre-built modules and packages that do a lot of the heavy lifting. To get off to the best start in embedded you need to be doing Computer Engineering or similar and select courses that have an embedded aspect to them. Unfortunately everyone is so fixated on becoming a FAANG employee and earning a bazillion dollars in Silicon Valley that they completely overlook the opportunity to go down a different path in the embedded world, which for me at least has been a far more satisfying career path.\n\nLook at the term \"Embedded Systems\".\nIt's a system, mechanical + electrical + software. The more you know about each part, the further you can go. You do not need to have a PhD in all, just a good understanding in most.\nIf you are tasked with doing a motor controller, you may ask, what is the load required. OK, you would need to know about, well, motors. Being a software guy, you would not have never taken a class on motors or not have any idea how to rate a transistor for a 2 HP motor.\nHaving a good understanding of the different components involved, you would be invaluable to other members on the team.\nThis is why you should build something for yourself. You would have to go through data sheets and learn how to code for those parts.\nAn employer will ask if you can write a driver for some new chip. If you can not explain how to do that, why would they hire you ?\nYes, your a beginner, but there are others that have been doing projects since they were 12 years old. How would you compete with them ??\nGood Luck, Have Fun, Learn Something NEW\n\n\nWell, it's been two years since I have been learning and diving into the world of embedded electronics. The first thing you need to have is the right attitude and hunger for knowledge. I am currently pursuing B.Tech, in computer science and engineering. The world of \"WIRES\" BREADBOARD, CHIPSETS have always fascinated me.\nFor starters: Get your toolkit, not an expensive one. But it should contain all the right equipment. E.g soldering iron, testers, wires!,\u00c2\u00a0breadboard! etc.How to start?\u00c2\u00a0The answer is simple:\u00c2\u00a0Explore! After the second year we have to make a project in any of the domains, be it software or hardware. I chose the later, because I thought it would be a great opportunity to really make a worthy project which is just not an another textbook stuff, but will be having practical implementations too.\nYou can think about the\u00c2\u00a0real world problems\u00c2\u00a0you face while dealing with your devices. For instance, I chose an open power monitor and tried to make it cheaper! And for about 2000/- bucks I made a simple power monitor which tracks the users' energy needs on the go.What not to expect:\u00c2\u00a0I have interacted with some of the people who are in this industry. First of all this is a hands-on game; theory will help you, but practicality of the hardware system is a different case altogether.\nJournals:\u00c2\u00a0Journals like EFY or magazines do help a lot. You can also get ample amount of help from some of the Facebook/Google Group related to the same.DIY:\u00c2\u00a0In short,\u00c2\u00a0do it yourself!\nCareer:\u00c2\u00a0I am no braniac when it comes to what industry really wants as I am currently exploring my taste in the field of embedded electronics, but this picture really sums it up:\n"
    },
    "Help me optimize the codes\nUnoptimized codes:\n\n#include <stdint.h>\n#include <stdio.h>\n\n// GPIO Register addresses (Assume memory-mapped I/O)\n#define GPIO_BASE 0x40020000\n#define GPIO_MODER ((volatile uint32_t*)(GPIO_BASE + 0x00))  // Mode register\n#define GPIO_ODR ((volatile uint32_t*)(GPIO_BASE + 0x14))    // Output Data Register\n\n// Macros for setting and clearing GPIO pins\n#define SET_PIN(pin) (*GPIO_ODR |= (1 << (pin)))     // Set pin high\n#define CLEAR_PIN(pin) (*GPIO_ODR &= ~(1 << (pin)))  // Set pin low\n\n// Function to simulate turning on/off an LED (Unoptimized GPIO manipulation)\nvoid toggle_led(uint8_t pin, uint32_t times) {\n    for (uint32_t i = 0; i < times; i++) {\n        // Inefficient approach: calling the same function multiple times\n        SET_PIN(pin);\n        delay(1000);  \n\n        CLEAR_PIN(pin);\n        delay(1000);  \n    }\n}\n\n// Simple delay function using a software loop (Inefficient, blocking)\nvoid delay(uint32_t time) {\n    for (uint32_t i = 0; i < time * 10000; i++) {\n    }\n}\n\n// Function to initialize GPIO (Unnecessarily verbose)\nvoid gpio_init(uint8_t pin) {\n    if (pin < 16) {\n        *GPIO_MODER &= ~(0x3 << (pin * 2));  // Clear mode bits for the pin\n        *GPIO_MODER |= (0x1 << (pin * 2));   // Set the pin to output mode\n    } else {\n        // Bad error handling (just returning)\n        return;  // Doesn't notify about the invalid pin\n    }\n}\n\n\nvoid led_pattern(uint8_t pin) {\n    for (int i = 0; i < 5; i++) {\n        SET_PIN(pin);\n        // Inefficient use of repeated delays\n        delay(1000);\n        delay(1000);  \n\n        CLEAR_PIN(pin);\n        delay(2000); \n    }\n}\n\nint main() {\n    // Initialize GPIO for LED control\n    gpio_init(5);  \n    // Toggle the LED with inefficient delay handling\n    toggle_led(5, 10);\n\n\n    led_pattern(5);\n\n    return 0;  \n}\n": {
        "embedding": [
            0.010721608065068722,
            0.004219354130327702,
            -0.05861010029911995,
            -0.002034657634794712,
            -0.06156818941235542,
            -0.04107024148106575,
            0.024023687466979027,
            0.11765427887439728,
            -0.07815553992986679,
            -0.03305346518754959,
            -0.0011682468466460705,
            0.03162182494997978,
            -0.01902427338063717,
            -0.08071638643741608,
            -0.012870143167674541,
            0.0983753651380539,
            -0.023468367755413055,
            0.034226905554533005,
            -0.055802181363105774,
            -0.009348120540380478,
            0.029118012636899948,
            -0.07181204855442047,
            -0.06131420284509659,
            0.02446904219686985,
            -0.023567454889416695,
            0.021915750578045845,
            0.10834018141031265,
            0.021495632827281952,
            0.006840846035629511,
            -0.0014438716461881995,
            0.06868558377027512,
            -0.021129928529262543,
            0.1038331687450409,
            0.0239114910364151,
            0.027930598706007004,
            0.06479956954717636,
            -0.09165779501199722,
            -0.11228670179843903,
            -0.02861534245312214,
            0.015983011573553085,
            -0.11792050302028656,
            -0.01489995513111353,
            0.0028976767789572477,
            0.07163222134113312,
            0.019929826259613037,
            0.05283943936228752,
            0.022590121254324913,
            0.01351742073893547,
            -0.05209052190184593,
            -0.10224771499633789,
            0.015883712098002434,
            0.07619185745716095,
            0.017755093052983284,
            -0.12396591901779175,
            0.01839151233434677,
            -0.031058138236403465,
            -0.01715616136789322,
            -0.06822339445352554,
            0.09944586455821991,
            -0.04352249950170517,
            -0.00237241736613214,
            0.037948958575725555,
            0.08607953786849976,
            -0.04119313135743141,
            -0.02023329772055149,
            0.0620582289993763,
            0.01501739863306284,
            -0.02392079308629036,
            0.06822782009840012,
            0.03506513312458992,
            -0.07574203610420227,
            0.06342106312513351,
            0.025713007897138596,
            0.07081080228090286,
            -0.019852973520755768,
            -0.059644244611263275,
            -0.008914382196962833,
            0.0088758310303092,
            -0.016716670244932175,
            -0.12707851827144623,
            0.013167244382202625,
            -0.009574231691658497,
            0.013527214527130127,
            -0.001699350425042212,
            0.01582501083612442,
            0.009105540812015533,
            -0.011914639733731747,
            0.04254750534892082,
            0.05184757709503174,
            -0.004851948469877243,
            0.012781881727278233,
            0.036181624978780746,
            -0.012101667933166027,
            -0.05068531259894371,
            0.021300623193383217,
            -0.04122653976082802,
            0.04415624588727951,
            -0.07637885212898254,
            -0.062456220388412476,
            0.08119863271713257,
            0.011934684589505196,
            0.03797401860356331,
            -0.03100680001080036,
            0.019585678353905678,
            -0.012294595129787922,
            0.0016827455256134272,
            0.06797914952039719,
            0.12175392359495163,
            -0.06478195637464523,
            0.040311381220817566,
            0.034761179238557816,
            0.015971677377820015,
            0.002973774215206504,
            0.006592311430722475,
            0.03952133655548096,
            0.06707962602376938,
            0.017266806215047836,
            0.04348406195640564,
            0.02896161936223507,
            0.07564521580934525,
            0.0037983565125614405,
            -0.010173310525715351,
            -0.048559222370386124,
            0.01750238984823227,
            -0.05477131903171539,
            -0.04927987605333328,
            -0.06365750730037689,
            7.328272759368059e-33,
            0.006488777231425047,
            -0.02389833703637123,
            -0.09874406456947327,
            -0.016014590859413147,
            -0.013533028773963451,
            0.013908123597502708,
            0.05336175113916397,
            -0.0048295799642801285,
            -0.0573691688477993,
            0.07244846224784851,
            0.030214624479413033,
            -0.07131130248308182,
            -0.03123428113758564,
            0.10445048660039902,
            0.04926103726029396,
            -0.08890191465616226,
            0.08282364904880524,
            0.032222311943769455,
            -0.026038778945803642,
            -0.023479536175727844,
            0.050815992057323456,
            -0.009383665397763252,
            -0.08006662130355835,
            -0.015472562983632088,
            0.008877618238329887,
            0.07880805432796478,
            -0.05389140173792839,
            -0.05509517714381218,
            -0.00036479163100011647,
            0.013953742571175098,
            0.008592001162469387,
            -0.05111660435795784,
            -0.04534388706088066,
            -0.026823045685887337,
            0.061123497784137726,
            -0.027706844732165337,
            0.02574753947556019,
            -0.01784125529229641,
            0.04123540595173836,
            -0.019401293247938156,
            -0.0707978680729866,
            -0.009751361794769764,
            0.050760552287101746,
            -0.06170915812253952,
            0.007665148936212063,
            0.03080011159181595,
            -0.042584870010614395,
            0.09426295757293701,
            0.02143794484436512,
            -0.01651862822473049,
            0.05556751787662506,
            -0.014348293654620647,
            -0.005292445886880159,
            -0.01620524376630783,
            -0.027900515124201775,
            -0.08031794428825378,
            -0.07193281501531601,
            0.0331515409052372,
            0.02157117985188961,
            0.12962879240512848,
            -0.021965553984045982,
            0.057086553424596786,
            0.026685206219553947,
            -0.0440969243645668,
            -0.020481416955590248,
            0.02048124000430107,
            -0.009113503620028496,
            -0.03830908238887787,
            -0.01680518127977848,
            0.07334446907043457,
            -0.05605601891875267,
            0.03958936780691147,
            0.02566164918243885,
            -0.023453349247574806,
            -0.05141391605138779,
            0.039808787405490875,
            0.09474892914295197,
            0.02588001638650894,
            -0.08692508935928345,
            -0.09141727536916733,
            0.03227025270462036,
            0.08649853616952896,
            -0.02272460050880909,
            -0.05620446056127548,
            0.03587610274553299,
            -0.11418251693248749,
            0.01942255347967148,
            -0.0472155325114727,
            -0.14575819671154022,
            0.07840253412723541,
            -0.030483219772577286,
            -0.032670196145772934,
            0.0725865587592125,
            -0.059404730796813965,
            -0.07285626232624054,
            -7.289742258600012e-33,
            0.051220234483480453,
            0.05953403189778328,
            0.08913484960794449,
            -0.017461860552430153,
            -0.04479868337512016,
            -0.02454448491334915,
            0.005167001858353615,
            -0.10905201733112335,
            -0.05769418552517891,
            -0.01395397074520588,
            -0.032339271157979965,
            -0.04197435826063156,
            -0.008195227012038231,
            -0.02039167284965515,
            0.02605668269097805,
            0.011979732662439346,
            -0.030634630471467972,
            0.08195321261882782,
            0.0012333906488493085,
            0.0981016457080841,
            -0.07698360830545425,
            0.08087175339460373,
            -0.02231708914041519,
            -0.017345184460282326,
            -0.0814291462302208,
            0.09472130239009857,
            -0.014177413657307625,
            0.11392749845981598,
            0.01958528906106949,
            -0.012148324400186539,
            -0.03711768984794617,
            0.08496697247028351,
            -0.0391668863594532,
            0.03313744440674782,
            0.0002825779083650559,
            0.029741542413830757,
            0.02446894161403179,
            0.002527201548218727,
            0.005099824164062738,
            -0.04489102214574814,
            0.11564189940690994,
            0.03129270300269127,
            -0.04458409920334816,
            -0.023560816422104836,
            -0.008525611832737923,
            0.08994143456220627,
            -0.022375326603651047,
            0.010679550468921661,
            -0.030315473675727844,
            -0.04751354455947876,
            -0.025093933567404747,
            -0.040341272950172424,
            -0.02514827251434326,
            0.06260403245687485,
            -0.05783425271511078,
            -0.026660270988941193,
            0.00569030549377203,
            -0.04984056577086449,
            0.025869999080896378,
            -0.0334593839943409,
            -0.01286156103014946,
            -0.04038166627287865,
            0.04521382227540016,
            0.06706348061561584,
            0.050383031368255615,
            -0.08944836258888245,
            -0.03844650462269783,
            -0.009383857250213623,
            -0.02127915434539318,
            -0.02330387942492962,
            -0.04281912371516228,
            -0.05400315299630165,
            -0.004149392247200012,
            0.022483550012111664,
            0.0073434035293757915,
            0.02300078794360161,
            -0.01956186816096306,
            -0.042437296360731125,
            0.006397758144885302,
            0.0752178281545639,
            -0.02562468871474266,
            0.008227257989346981,
            0.009252870455384254,
            0.03704856336116791,
            -0.04626431688666344,
            0.12400399148464203,
            -0.02285822294652462,
            0.003528001718223095,
            0.029178254306316376,
            -0.017771251499652863,
            -0.05170099437236786,
            0.01727295108139515,
            0.15053480863571167,
            0.010540606454014778,
            -0.03683183714747429,
            -5.510950984444207e-08,
            0.04230363667011261,
            -0.08483108878135681,
            0.05486012250185013,
            0.003967630676925182,
            0.00540113402530551,
            -0.011249057948589325,
            -0.011824912391602993,
            0.0004391369584482163,
            -0.06808486580848694,
            -0.06541957706212997,
            0.03403167799115181,
            0.003654744941741228,
            -0.04763280600309372,
            -0.06714460253715515,
            0.041607361286878586,
            -0.008908465504646301,
            -0.07910661399364471,
            -0.0668821707367897,
            0.009637931361794472,
            0.007890145294368267,
            -0.05478557199239731,
            -0.00030630844412371516,
            0.003623037366196513,
            -0.022940758615732193,
            0.021585553884506226,
            -0.01229048054665327,
            0.08841793984174728,
            0.04362093657255173,
            0.0539403110742569,
            0.030912131071090698,
            0.08000002801418304,
            0.0214755330234766,
            0.022243961691856384,
            0.07462085783481598,
            0.02977948822081089,
            -0.08662649244070053,
            -0.0021204939112067223,
            0.038111165165901184,
            -0.021278126165270805,
            -0.007647146470844746,
            -0.022575844079256058,
            0.01045158226042986,
            -0.07903577387332916,
            0.011437646113336086,
            0.03157558664679527,
            -0.07104767858982086,
            0.03872497379779816,
            0.0178019180893898,
            0.028556236997246742,
            -0.026337847113609314,
            -0.06854508817195892,
            0.0906803235411644,
            -0.05438923090696335,
            0.03818592056632042,
            0.00353880668990314,
            -0.06413505226373672,
            -0.058979809284210205,
            0.036523737013339996,
            0.021323533728718758,
            0.03763920068740845,
            -0.028943154960870743,
            2.362059967708774e-05,
            -0.08090902864933014,
            -0.09803512692451477
        ],
        "original_data": "Help me optimize the codes\nUnoptimized codes:\n\n#include <stdint.h>\n#include <stdio.h>\n\n// GPIO Register addresses (Assume memory-mapped I/O)\n#define GPIO_BASE 0x40020000\n#define GPIO_MODER ((volatile uint32_t*)(GPIO_BASE + 0x00))  // Mode register\n#define GPIO_ODR ((volatile uint32_t*)(GPIO_BASE + 0x14))    // Output Data Register\n\n// Macros for setting and clearing GPIO pins\n#define SET_PIN(pin) (*GPIO_ODR |= (1 << (pin)))     // Set pin high\n#define CLEAR_PIN(pin) (*GPIO_ODR &= ~(1 << (pin)))  // Set pin low\n\n// Function to simulate turning on/off an LED (Unoptimized GPIO manipulation)\nvoid toggle_led(uint8_t pin, uint32_t times) {\n    for (uint32_t i = 0; i < times; i++) {\n        // Inefficient approach: calling the same function multiple times\n        SET_PIN(pin);\n        delay(1000);  \n\n        CLEAR_PIN(pin);\n        delay(1000);  \n    }\n}\n\n// Simple delay function using a software loop (Inefficient, blocking)\nvoid delay(uint32_t time) {\n    for (uint32_t i = 0; i < time * 10000; i++) {\n    }\n}\n\n// Function to initialize GPIO (Unnecessarily verbose)\nvoid gpio_init(uint8_t pin) {\n    if (pin < 16) {\n        *GPIO_MODER &= ~(0x3 << (pin * 2));  // Clear mode bits for the pin\n        *GPIO_MODER |= (0x1 << (pin * 2));   // Set the pin to output mode\n    } else {\n        // Bad error handling (just returning)\n        return;  // Doesn't notify about the invalid pin\n    }\n}\n\n\nvoid led_pattern(uint8_t pin) {\n    for (int i = 0; i < 5; i++) {\n        SET_PIN(pin);\n        // Inefficient use of repeated delays\n        delay(1000);\n        delay(1000);  \n\n        CLEAR_PIN(pin);\n        delay(2000); \n    }\n}\n\nint main() {\n    // Initialize GPIO for LED control\n    gpio_init(5);  \n    // Toggle the LED with inefficient delay handling\n    toggle_led(5, 10);\n\n\n    led_pattern(5);\n\n    return 0;  \n}\n"
    }
}